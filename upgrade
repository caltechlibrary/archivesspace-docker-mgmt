#!/usr/bin/env bash

if [ "$(id -u)" -ne 0 ]; then
    echo "ðŸ˜µ SCRIPT MUST BE RUN AS ROOT (to modify /opt files)"
    echo "EXAMPLE: sudo ./$0 [--rebuild-solr]"
    exit 1
fi

# load environment variables from .env file
if [ -f .env ]; then
    set -a  # automatically export all variables
    # shellcheck source=/dev/null
    . ./.env
    set +a
else
    echo ".env file not found"
    exit 1
fi

# download latest archivesspace-docker release
curl -sLO "https://github.com/archivesspace/archivesspace/releases/download/${TAG}/archivesspace-docker-${TAG}.zip"
# unzip (creates ./archivesspace directory)
unzip -q "archivesspace-docker-${TAG}.zip"
# remove the zip file
rm "archivesspace-docker-${TAG}.zip"

replace_config_value() {
    local KEY="$1"
    local OLD="$2"
    local NEW="$3"
    local FILE="$4"
    if [[ "$FILE" == *.rb ]]; then
        # ruby file format: AppConfig[:key] = "value" or 'value'
        # ensure line starts with the key (no leading comments or whitespace before key)
        perl -i -pe "s/\Q$OLD\E/$NEW/g if /^\s*\Q$KEY\E/" "archivesspace/$FILE"
    else
        # .env file format: KEY=value
        # ensure line starts with KEY= (no leading comments)
        perl -i -pe "s/\Q$OLD\E/$NEW/g if /^\s*\Q$KEY\E=/" "archivesspace/$FILE"
    fi
}

# replace values in the docker .env file
replace_config_value "MYSQL_DATABASE" "archivesspace" "${DB}" ".env"
replace_config_value "NGINX_PORT" "80" "${NGINX_PORT}" ".env"
# replace values in the config.rb file
replace_config_value "AppConfig[:db_url]" "archivesspace" "${DB}" "config/config.rb"
replace_config_value "AppConfig[:oai_proxy_url]" "localhost" "${DOMAIN}" "config/config.rb"
replace_config_value "AppConfig[:frontend_proxy_url]" "localhost" "${DOMAIN}" "config/config.rb"
replace_config_value "AppConfig[:public_proxy_url]" "localhost" "${DOMAIN}" "config/config.rb"

# run the restore script
./restore --upgrade
# unzip the database backup
datestamp=$(TZ=':US/Pacific' date +'%Y-%m-%d')
gunzip -k "backups/${DB}-${datestamp}.sql.gz"
# move db to the sql directory inside the archivesspace-docker directory
mv "backups/${DB}-${datestamp}.sql" "archivesspace/sql"

# move the configured application directory
if [ -d "/opt/archivesspace-docker-${TAG}" ]; then
    rm -rf "/opt/archivesspace-docker-${TAG}"
fi
mv archivesspace "/opt/archivesspace-docker-${TAG}"

# bring down archivesspace
docker compose --project-name archivesspace --file /opt/archivesspace/docker-compose.yml down

if [[ "$1" == "--rebuild-solr" ]]; then
    docker volume rm archivesspace_app-data archivesspace_solr-data
fi

# relink /opt/archivesspace directory
ln -sf "/opt/archivesspace-docker-${TAG}" /opt/archivesspace

# bring up archivesspace
docker compose --project-name archivesspace --file /opt/archivesspace/docker-compose.yml pull
docker compose --project-name archivesspace --file /opt/archivesspace/docker-compose.yml up -d --build --force-recreate

echo "ðŸŽ‰ Upgrade complete! ArchivesSpace is now running with the latest version. It may take a few minutes to become available."
