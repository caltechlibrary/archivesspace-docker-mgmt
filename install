#!/usr/bin/env bash

# load environment variables from .env file
if [ -f .env ]; then
    set -a  # automatically export all variables
    # shellcheck source=/dev/null
    . ./.env
    set +a
else
    echo ".env file not found"
    exit 1
fi

if [ -z "$INSTALL_DIRECTORY" ] && [ "$(id -u)" -ne 0 ]; then
    echo "😵 SCRIPT MUST BE RUN AS ROOT (to modify /opt files)"
    echo "EXAMPLE: sudo $0 [--rebuild-solr]"
    exit 1
fi

if [ -z "$INSTALL_DIRECTORY" ]; then
    INSTALL_DIRECTORY="/opt"
fi

# download latest archivesspace-docker release
curl -sLO "https://github.com/archivesspace/archivesspace/releases/download/${TAG}/archivesspace-docker-${TAG}.zip"
# unzip (creates ./archivesspace directory)
unzip -q "archivesspace-docker-${TAG}.zip"
# remove the zip file
rm "archivesspace-docker-${TAG}.zip"

# REPLACE ARCHIVESSPACE DEFAULT CONFIGURATION WITH CUSTOM CONFIGURATION
replace_env_value() {
    local KEY="$1"
    local OLD="$2"
    local NEW="$3"
    perl -i -pe "s/\\Q$OLD\\E/$NEW/g if /^\\s*\\Q$KEY\\E=/" "archivesspace/.env"
}
mv archivesspace/config/config.rb archivesspace/config/default-config.rb
echo '# Custom Configuration' > archivesspace/config/config.rb
{
    echo 'AppConfig[:solr_url] = "http://solr:8983/solr/archivesspace"'
    echo 'AppConfig[:session_expire_after_seconds] = 604800'
} >> archivesspace/config/config.rb
if [ -z "$DB" ]; then
    DB="archivesspace"
fi
echo "AppConfig[:db_url] = 'jdbc:mysql://db:3306/${DB}?useUnicode=true&characterEncoding=UTF-8&user=as&password=as123&useSSL=false&allowPublicKeyRetrieval=true'" >> archivesspace/config/config.rb
# replace value in the docker .env file
replace_env_value "MYSQL_DATABASE" "archivesspace" "${DB}" ".env"
if [ -z "$DOMAIN" ]; then
    DOMAIN="localhost"
fi
{
    echo "AppConfig[:public_proxy_url] = 'http://${DOMAIN}/'"
    echo "AppConfig[:frontend_proxy_url] = 'http://${DOMAIN}/staff/'"
    echo "AppConfig[:oai_proxy_url] = 'http://${DOMAIN}/oai/'"
} >> archivesspace/config/config.rb
# customize the UI with a border color
if [ -n "$BORDER_COLOR" ]; then
    echo '<%= stylesheet_link_tag "#{@base_url}/assets/custom.css" %>' > archivesspace/plugins/local/frontend/views/layout_head.html.erb
    mkdir -p archivesspace/plugins/local/frontend/assets
    echo ".min-vh-100 { border: thick solid ${BORDER_COLOR} }" > archivesspace/plugins/local/frontend/assets/custom.css
fi
if [ -n "$NGINX_PORT" ]; then
    # replace value in the docker .env file
    replace_env_value "NGINX_PORT" "80" "${NGINX_PORT}" ".env"
fi

# add phpMyAdmin service to docker-compose.yml
add_phpmyadmin_to_compose() {
    local compose_file="$1"
    local patch_file="./phpmyadmin-service.yml"

    # check if phpMyAdmin service already exists
    if grep -q "phpmyadmin:" "$compose_file"; then
        return 0
    fi

    # insert phpMyAdmin service before the volumes section
    awk '
    /^volumes:/ {
        while ((getline line < "'"$patch_file"'") > 0) {
            print line
        }
        close("'"$patch_file"'")
        print ""
    }
    { print }
    ' "$compose_file" > "${compose_file}.tmp"

    mv "${compose_file}.tmp" "$compose_file"
}

add_phpmyadmin_to_compose "archivesspace/docker-compose.yml"

# run the db script
./db --install
# unzip the database backup
datestamp=$(TZ=':US/Pacific' date +'%Y-%m-%d')
gunzip -k "backups/${DB}-${datestamp}.sql.gz"
# move db to the sql directory inside the archivesspace-docker directory
mv "backups/${DB}-${datestamp}.sql" "archivesspace/sql"

compose_file="${INSTALL_DIRECTORY}/archivesspace/docker-compose.yml"

# bring down archivesspace
if [ -f "$compose_file" ]; then
    if docker compose --project-name archivesspace --file "$compose_file" ps -q | grep -q .; then
        docker compose --project-name archivesspace --file "$compose_file" down
    fi
fi

# move the configured application directory
if [ -d "${INSTALL_DIRECTORY}/archivesspace-docker-${TAG}" ]; then
    rm -rf "${INSTALL_DIRECTORY}/archivesspace-docker-${TAG}"
fi
mv archivesspace "${INSTALL_DIRECTORY}/archivesspace-docker-${TAG}"

if [[ "$1" == "--rebuild-solr" ]]; then
    if docker volume inspect archivesspace_app-data >/dev/null 2>&1; then
        docker volume rm archivesspace_app-data
    fi
    if docker volume inspect archivesspace_solr-data >/dev/null 2>&1; then
        docker volume rm archivesspace_solr-data
    fi
fi

# symlink $INSTALL_DIRECTORY/archivesspace
if [ -L "${INSTALL_DIRECTORY}/archivesspace" ]; then
    if [ "$(readlink "${INSTALL_DIRECTORY}/archivesspace")" != "${INSTALL_DIRECTORY}/archivesspace-docker-${TAG}" ]; then
        rm "${INSTALL_DIRECTORY}/archivesspace"
        ln -s "${INSTALL_DIRECTORY}/archivesspace-docker-${TAG}" "${INSTALL_DIRECTORY}/archivesspace"
    fi
elif [ -e "${INSTALL_DIRECTORY}/archivesspace" ]; then
    echo "❌ ${INSTALL_DIRECTORY}/archivesspace exists and is not a symlink"
    exit 1
else
    ln -s "${INSTALL_DIRECTORY}/archivesspace-docker-${TAG}" "${INSTALL_DIRECTORY}/archivesspace"
fi

# bring up archivesspace
docker compose --project-name archivesspace --file "$compose_file" pull
docker compose --project-name archivesspace --file "$compose_file" up -d --build --force-recreate

echo "Waiting for archivesspace container to become healthy..."
while true; do
    status=$(docker inspect --format='{{.State.Health.Status}}' archivesspace 2>/dev/null)
    if [ "$status" = "healthy" ]; then
        break
    elif [ "$status" = "unhealthy" ]; then
        echo "archivesspace container is unhealthy!"
    elif [ -z "$status" ]; then
        echo "archivesspace container not found yet..."
    else
        echo "archivesspace container status: $status"
    fi
    sleep 10
done

# change the admin password
docker exec archivesspace /archivesspace/scripts/password-reset.sh admin admin
# soft reindex
docker exec archivesspace rm -f /archivesspace/data/indexer_state/*
docker exec archivesspace rm -f /archivesspace/data/indexer_pui_state/*

echo "🎉 ArchivesSpace ${TAG} has been installed!
It may take a few minutes to become available at http://${DOMAIN}/ (Public UI) and http://${DOMAIN}/staff/ (Staff UI).
View logs by running:
docker compose --project-name archivesspace --file \"$compose_file\" logs -f"
